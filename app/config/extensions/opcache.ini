; NOTE: The actual opcache.so extention is NOT SET HERE but rather (/usr/local/etc/php/conf.d/docker-php-ext-opcache.ini)
; /usr/local/lib/php/extensions/no-debug-non-zts-20180731/opcache.so
; http://php.net/manual/en/opcache.configuration.php
[opcache]
zend_extension=opcache.so

; OPcache On/Off switch. When set to Off, code is not optimized.
; Enables the opcode cache. When disabled, code is not optimised or cached.
; The setting opcache.enable can not be enabled at runtime through ini_set(),
; it can only be disabled. Trying to enable it at in a script will generate a warning.
; (default "1")
opcache.enable=1

; Enables the OPcache for the CLI version of PHP.
; It's mostly for testing and debugging.
; (default "0")
opcache.enable_cli=1

; The OPcache shared memory storage size.
; The amount of memory for storing precompiled PHP code in Mbytes.
; (default "64")
opcache.memory_consumption=256

; The amount of memory used to store interned strings, in megabytes.
; This configuration directive is ignored in PHP < 5.3.0.
; (default "4")
opcache.interned_strings_buffer=32

; The maximum number of keys (and therefore scripts) in the OPcache hash table.
; The actual value used will be the first number in the set of prime numbers
; { 223, 463, 983, 1979, 3907, 7963, 16229, 32531, 65407, 130987 } that is greater than or equal to the configured value.
;The minimum value is 200. The maximum value is 100000 in PHP < 5.5.6, and 1000000 in later versions.
; (default "2000")
opcache.max_accelerated_files=32531

; The maximum percentage of wasted memory that is allowed before a restart is scheduled.
; (default "5")
opcache.max_wasted_percentage=5

; When this directive is enabled, OPcache appends the current working directory to the script key,
; thereby eliminating possible collisions between files with the same base name.
; Disabling this directive improves performance, but may break existing applications.
; (default "1")
opcache.use_cwd=1

; If enabled, OPcache will check for updated scripts every opcache.revalidate_freq seconds.
; When this directive is disabled, you must reset OPcache manually via opcache_reset(), opcache_invalidate()
; or by restarting the Web server for changes to the filesystem to take effect.
; (default "1")
; PROD[0] | DEV[1]
opcache.validate_timestamps=0

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation. ("1" means validate once per second, but only once
; per request. "0" will result in OPcache checking for updates on every request.)
;     This configuration directive is ignored if opcache.validate_timestamps is disabled.
; (default "2")
opcache.revalidate_freq=0

; Enables or disables file search in include_path optimization. If the file search is disabled and a cached file
; is found that uses the same include_path, the file is not searched again. Thus, if a file with the same name
; appears somewhere else in include_path, it won't be found. Enable this directive if this optimization has
; an effect on your applications. The default for this directive is disabled, which means that optimization is active.
; (default "0")
opcache.revalidate_path=0

; If disabled, all documentation comments will be discarded from the opcode cache to reduce the size
; of the optimised code. Disabling this configuration directive may break applications and frameworks
; that rely on comment parsing for annotations, including Doctrine, Zend Framework 2 and PHPUnit.
; (default "1")
opcache.save_comments=1

; When enabled, the opcode cache will be checked for whether a file has already been cached when file_exists(),
; is_file() and is_readable() are called. This may increase performance in applications that check the existence
; and readability of PHP scripts, but risks returning stale data if opcache.validate_timestamps is disabled.
; (default "0")
opcache.enable_file_override=1

; A bitmask that controls which optimisation passes are executed.
; (default "0x7FFFBFFF")
opcache.optimization_level=0x7FFFBFFF

; The location of the OPcache blacklist file (wildcards allowed).
; The location of the OPcache blacklist file. A blacklist file is a text file containing the names of files
; that should not be accelerated, one per line. Wildcards are allowed, and prefixes can also be provided.
; Lines starting with a semi-colon are ignored as comments.
;
; A simple blacklist file might look as follows:
;
; Matches a specific file.
; /var/www/broken.php
; A prefix that matches all files starting with x.
; /var/www/x
; A wildcard match.
; /var/www/*-broken.php
;
; Files are usually triggered by one of the following three reasons:
; 1) Directories that contain auto generated code, like Smarty or ZFW cache.
; 2) Code that does not work well when accelerated, due to some delayed compile time evaluation.
; 3) Code that triggers an OPcache bug.
; (default "")
opcache.blacklist_filename=""

; The maximum file size that will be cached, in bytes. If this is 0, all files will be cached.
; (default "0")
opcache.max_file_size=0

; If non-zero, OPcache will verify the cache checksum every N requests, where N is the value of this
; configuration directive. This should only be enabled when debugging, as it will impair performance.
; (default "0")
opcache.consistency_checks=0

; The length of time to wait for a scheduled restart to begin if the cache isn't active, in seconds.
; If the timeout is hit, then OPcache assumes that something is wrong and will kill the processes
; holding locks on the cache to permit a restart.
;
; If opcache.log_verbosity_level is set to 2 or above, a warning will be recorded in the error log when this occurs.
; (default "180")
opcache.force_restart_timeout=180

; The error log for OPcache errors. An empty string is treated the same as stderr,
; and will result in logs being sent to standard error (which will be the Web server error log in most cases).
; (default "" which means stderr)
opcache.error_log=/usr/local/var/log/php/php-opcache.log

; The log verbosity level. By default, only fatal errors (level 0) and errors (level 1) are logged.
; Other levels available are warnings (level 2), information messages (level 3) and debug messages (level 4).
; (default "1")
opcache.log_verbosity_level=3

; The preferred memory model for OPcache to use. If left empty, OPcache will choose the most
; appropriate model, which is the correct behaviour in virtually all cases.
; (default "")
opcache.preferred_memory_model=""

; Protects shared memory from unexpected writes while executing scripts.
; This is useful for internal debugging only.
; (default "0")
opcache.protect_memory=0

; Prevents caching files that are less than this number of seconds old. It protects from caching of incompletely
; updated files. In case all file updates on your site are atomic, you may increase performance by setting it to "0".
; (default "2")
opcache.file_update_protection=2

; Absolute path used to store shared lockfiles (for *nix only).
; (default /tmp)
opcache.lockfile_path=/tmp/php

; Enables and sets the second level cache directory. It should improve performance when SHM memory is full,
; at server restart or SHM reset. The default "" disables file based caching.
;    [Available as of PHP 7.0.0]
; (default NULL)
;opcache.file_cache =

; Enables or disables opcode caching in shared memory.
;    [Available as of PHP 7.0.0]
; (default "0")
opcache.file_cache_only=0

; Enables or disables checksum validation when script loaded from file cache.
;    [Available as of PHP 7.0.0]
; (default "1")
opcache.file_cache_consistency_checks=1

; Validates the cached file permissions against the current user.
;    [Available as of PHP 7.0.0]
; (default "0")
; opcache.validate_permission=0

; Prevents name collisions in chroot'ed environments. This should be enabled in all chroot'ed
; environments to prevent access to files outside the chroot.
;    [Available as of PHP 7.0.0]
; (default "0")
; opcache.validate_root=0
