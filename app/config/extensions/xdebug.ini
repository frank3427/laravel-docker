; NOTE: The actual xdebug.so extention is NOT SET HERE but rather (/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini)
; /usr/local/lib/php/extensions/no-debug-non-zts-20180731/xdebug.so
; https://xdebug.org/docs/all_setting
[xdebug]
zend_extension=xdebug.so

;;;
; Variable Display
;;;

; If this setting is 1, Xdebug will color var_dumps and stack traces output when in
; CLI mode and when the output is a tty. On Windows, the ANSICON tool needs to be installed.
; (default 0)
xdebug.cli_color=1

; By default Xdebug overloads var_dump() with its own improved version for displaying variables when the html_errors php.ini setting is set to 1 or 2.
; In case you do not want that, you can set this setting to 0, but check first if it's not smarter to turn off html_errors.
; (default 2)
xdebug.overload_var_dump=2

; Controls the protection mechanism for infinite recursion protection.
; The value of this setting is the maximum level of nested functions that are allowed before the script will be aborted.
; (default 256)
xdebug.max_nesting_level=256

; Controls the amount of array children and object's properties are shown when variables
; are displayed with either xdebug_var_dump(), xdebug.show_local_vars or through Function Traces.
; To disable any limitation, use -1 as value.
; (default 128)
xdebug.var_display_max_children=-1

; Controls the maximum string length that is shown when variables are displayed with either xdebug_var_dump(),
; xdebug.show_local_vars or through Function Traces.
; To disable any limitation, use -1 as value.
; (default 512)
xdebug.var_display_max_data=-1

; Controls how many nested levels of array elements and object properties are when variables
; are displayed with either xdebug_var_dump(), xdebug.show_local_vars or through Function Traces.
; The maximum value you can select is 1023. You can also use -1 as value to select this maximum number.
; (default 3)
xdebug.var_display_max_depth=-1

;;;
; Stack Traces
;;;

; If this setting is set to 1 then errors will always be displayed,
; no matter what the setting of PHP's display_errors is.
; (default 0)
xdebug.force_display_errors=1

; This setting, defaulting to 0, controls whether Xdebug should collect the parameters passed
; to functions when a function call is recorded in either the function trace or the stack trace.
; (default 0)
xdebug.collect_params=0

; This setting tells Xdebug to gather information about which variables are used in a certain scope.
; This analysis can be quite slow as Xdebug has to reverse engineer PHP's opcode arrays.
; This setting will not record which values the different variables have, for that use xdebug.collect_params.
; This setting needs to be enabled only if you wish to use xdebug_get_declared_vars().
; (default 0)
xdebug.collect_vars=0

; When this setting is set to true, Xdebug adds the values of the super globals as configured through
; the xdebug.dump.* to on-screen stack traces and the error log (if enabled).
; (default 1)
xdebug.dump_globals=1

; Controls whether the values of the superglobals should be dumped on all error situations (set to 0)
; or only on the first (set to 1).
; (default 1)
xdebug.dump_once=1

; If you want to dump undefined values from the superglobals you should set this setting to 1,
; otherwise leave it set to 0.
; (default 0)
xdebug.dump_undefined=0

; * can be any of COOKIE, FILES, GET, POST, REQUEST, SERVER, SESSION.
; These seven settings control which data from the superglobals is shown when an error situation occurs.
;
; Each of those php.ini setting can consist of a comma seperated list of variables from this superglobal to dump,
; or * for all of them. Make sure you do not add spaces in this setting.
xdebug.dump.SERVER=REMOTE_ADDR,REQUEST_METHOD,REQUEST_URI
xdebug.dump.COOKIES=*
xdebug.dump.FILES=*
xdebug.dump.GET=*
xdebug.dump.POST=*
xdebug.dump.REQUEST=*
xdebug.dump.SESSION=*

; This setting determines the format with which Xdebug renders filenames in HTML stack traces (default: ...%s%n)
; and location information through the overloaded xdebug_var_dump() (default: %f).
; (default ...%s%n)
xdebug.filename_format=...%s%a

; When this setting is set to 1, Xdebug will show a stack trace whenever
; an Error is raised - even if this Error is actually caught.
; (default 0)
xdebug.show_error_trace=1

; When this setting is set to 1, Xdebug will show a stack trace whenever
; an Exception or Error is raised - even if this Exception or Error is actually caught.
;
; Error 'exceptions' were introduced in PHP 7.
; (default 0)
xdebug.show_exception_trace=1

; When this setting is set to something != 0 Xdebug's generated stack dumps in error situations
; will also show all variables in the top-most scope. Beware that this might generate a lot of information,
; and is therefore turned off by default.
; (default 0)
xdebug.show_local_vars=1

; This setting, defaulting to 0, controls whether Xdebug should write the return value
; of function calls to the trace files.
; (default 0)
xdebug.collect_return=0

; When this setting is set to something != 0 Xdebug's human-readable generated trace files will
; show the difference in memory usage between function calls. If Xdebug is configured to generate
; computer-readable trace files then they will always show this information.
; (default 0)
xdebug.show_mem_delta=1

; This setting, defaulting to 0, controls whether Xdebug should add variable assignments to function traces.
;
; From Xdebug 2.6, assign-by-var (=&) assignments are included too.
; (default 0)
xdebug.collect_assignments=1

; This setting, defaulting to 1, controls whether Xdebug should write the filename used in include(),
; include_once(), require() or require_once() to the trace files.
; (default 1)
xdebug.collect_includes=1

; The format of the trace file.
; (default 0)
xdebug.trace_format=0

; When set to '1' the trace files will be appended to, instead of being overwritten in subsequent requests.
; (default 0)
xdebug.trace_options=0

; The directory where the tracing files will be written to, make sure that the user who the PHP
; will be running as has write permissions to that directory.
; (default /tmp)
xdebug.trace_output_dir=/tmp/php

; This setting determines the name of the file that is used to dump traces into.
; The setting specifies the format with format specifiers, very similar to sprintf() and strftime().
; There are several format specifiers that can be used to format the file name.
; The '.xt' extension is always added automatically.
; (default trace.%c)
xdebug.trace_output_name=PHPXdebugTrace.%H.%t

;;;
; Profiling PHP Scripts
;;;

; When this setting is set to 1, a single profiler file will be written for multiple requests.
; One can surf to multiple pages or reload a page to get an average across all requests.
; The file will be named .cachegrind.aggregate. You will need to move this file to get another round of aggregate data.
; (default 0)
xdebug.profiler_aggregate=0

; Enables Xdebug's profiler which creates files in the profile output directory.
; Those files can be read by KCacheGrind to visualize your data.
; This setting can not be set in your script with ini_set().
; If you want to selectively enable the profiler, please set xdebug.profiler_enable_trigger to 1 instead of using this setting.
; (default 0)
xdebug.profiler_enable=0

; When this setting is set to 1, you can trigger the generation of profiler files by using the XDEBUG_PROFILE GET/POST parameter,
; or set a cookie with the name XDEBUG_PROFILE. This will then write the profiler data to defined directory.
; In order to prevent the profiler to generate profile files for each request, you need to set xdebug.profiler_enable to 0.
; Access to the trigger itself can be configured through xdebug.profiler_enable_trigger_value.
; (default 0)
xdebug.profiler_enable_trigger=1

; The directory where the profiler output will be written to, make sure that the user who the PHP will be running
; as has write permissions to that directory. This setting can not be set in your script with ini_set().
; (default /tmp)
xdebug.profiler_output_dir=/tmp/php

; This setting determines the name of the file that is used to dump traces into.
; The setting specifies the format with format specifiers, very similar to sprintf() and strftime().
; There are several format specifiers that can be used to format the file name.
; (default cachegrind.out.%p)
xdebug.profiler_output_name=PHPXdebugCachegrind.out.%H.%p.%t

;;;
; Remote debugging
;;;

; Controls which IDE Key Xdebug should pass on to the DBGp debugger handler. The default is based on environment settings.
; First the environment setting DBGP_IDEKEY is consulted, then USER and as last USERNAME.
; The default is set to the first environment variable that is found. If none could be found the setting has as default ''.
; If this setting is set, it always overrides the environment variables.
xdebug.idekey=VSCODE

; If this setting is 1, then Xdebug will disable the @ (shut-up) operator so that notices,
; warnings and errors are no longer hidden.
; (default 0)
xdebug.scream=0

; This switch controls whether Xdebug should try to contact a debug client which is listening on the host and port as
; set with the settings xdebug.remote_host and xdebug.remote_port. If a connection can not be established the script
; will just continue as if this setting was 0.
; (default 0)
xdebug.remote_enable=1

; If this setting is 1, then stacktraces will be shown by default on an error event.
; You can disable showing stacktraces from your code with xdebug_disable().
; As this is one of the basic functions of Xdebug, it is advisable to leave this setting set to 1.
; (default 1)
xdebug.default_enable=1

; Can be either 'php3' which selects the old PHP 3 style debugger output, 'gdb' which enables the GDB like
; debugger interface or 'dbgp' - the debugger protocol. The DBGp protocol is the only supported protocol.
;
; Note: Xdebug 2.1 and later only support 'dbgp' as protocol.
; (default dbgp)
xdebug.remote_handler=dbgp

; Selects the host where the debug client is running, you can either use a host name, IP address, or
; 'unix:///path/to/sock' for a Unix domain socket. This setting is ignored if xdebug.remote_connect_back is enabled.
;
; Support for Unix domain sockets was introduced in Xdebug 2.6.
; (default localhost)
xdebug.remote_host=host.docker.internal

; The port to which Xdebug tries to connect on the remote host. Port 9000 is the default for both the client and the
; bundled debugclient. As many clients use this port number, it is best to leave this setting unchanged.
; (default 9000)
xdebug.remote_port=9001

; Normally you need to use a specific HTTP GET/POST variable to start remote debugging (see Remote Debugging).
; When this setting is set to 1, Xdebug will always attempt to start a remote debugging session
; and try to connect to a client, even if the GET/POST/COOKIE variable was not present.
; (default 0)
xdebug.remote_autostart=1

; If enabled, the xdebug.remote_host setting is ignored and Xdebug will try to connect to the client that made the HTTP request.
; It checks the $_SERVER['HTTP_X_FORWARDED_FOR'] and $_SERVER['REMOTE_ADDR'] variables to find out which IP address to use.
;
; If xdebug.remote_addr_header is configured, then the $SERVER variable with the configured name will be checked
; before the $_SERVER['HTTP_X_FORWARDED_FOR'] and $_SERVER['REMOTE_ADDR'] variables.
;
; This setting does not apply for debugging through the CLI, as the $SERVER header variables are not available there.
;
; Please note that there is no filter available, and anybody who can connect to the webserver will then be able to
; start a debugging session, even if their address does not match xdebug.remote_host.
; (default 0)
xdebug.remote_connect_back=0

; If set to a value, it is used as filename to a file to which all remote debugger communications are logged.
; The file is always opened in append-mode, and will therefore not be overwritten by default.
; There is no concurrency protection available
; (default )
xdebug.remote_log=/usr/local/var/log/php/php-xdebug.log
