# Sets the path and other parameters of a cache
fastcgi_cache_path /var/cache/nginx/app levels=1:2 keys_zone=APP_CACHE:100m inactive=60m;

server {

    # Defines a key for caching
    fastcgi_cache_key "$scheme:$request_method:$host:$request_uri"; # or "$scheme:$request_method:$host:$uri:$is_args:$args";

    # server listen (HTTPS)
    listen 443 ssl http2;
    listen [::]:443 ssl http2;

    server_name @DOMAIN_APP@ www.@DOMAIN_APP@;

    # # www to non-www:
    # # Redirect www to non-www
    if ($host ~ ^www\.(?<domain>.+)$) {
        return 301 https://$domain$request_uri;
    }

    root /var/www/app/public;

    error_log /var/log/nginx/app.error.log warn;
    access_log /var/log/nginx/app.access.log main buffer=16K flush=1m;

    #####
    ## HTTP HEADERS
    #####

    # Force client-side SSL redirection.
    # The following header ensures that browser will ONLY connect to your server via HTTPS, regardless of what the users type in the browser's address bar.
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    # Used as a defense against clickjacking attacks.
    # Config to don't allow the browser to render the page inside an frame or iframe and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
    add_header X-Frame-Options SAMEORIGIN always;
    # The HTTP X-XSS-Protection response header is a feature of Internet Explorer, Chrome and Safari that stops pages from loading when they detect reflected cross-site scripting (XSS) attacks.
    # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
    add_header X-XSS-Protection "1; mode=block" always;
    # Prevent some browsers from MIME-sniffing the response.
    # When serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header, to disable content-type sniffing on some browsers.
    # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
    add_header X-Content-Type-Options nosniff always;
    # Allow control of HTTP referrers via the referrer meta tag.
    # A web application uses HTTPS and a URL-based session identifier.
    # The web application might wish to link to HTTPS resources on other web sites without leaking the user's session identifier in the URL.
    # This can be done by setting a `Referrer Policy` which whitelists trusted sources of content for your website.
    add_header Referrer-Policy $referrer_policy always;
    # Mitigate the risk of cross-site scripting and other content-injection attacks.
    # This can be done by setting a `Content Security Policy` which whitelists trusted sources of content for your website.
    # With Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy), you can tell the browser that it can only download content from the domains you explicitly allow.
    # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
    # https://www.owasp.org/index.php/Content_Security_Policy
    add_header Content-Security-Policy $content_security_policy;
    # Feature policy is a web platform API which gives a website the ability to allow or block the use of browser features in its own frame or in iframes that it embeds.
    add_header Feature-Policy $feature_policy;

    # The caches are all set to "public", so that any system can cache them.
    # Setting them to private would limit them to being cached by private caches, such as our browser.
    add_header Cache-Control "public";

    # MISS = This is a cache MISS because the file has not been requested before. Therefore the Cache server needed to proxy the request to the Origin Server to get the resource.
    # HIT = The Expires header remains unchanged, as Nginx simply returned the resource from it's cache. Those headers will update the next time the Cache Server goes back to the Origin Server to get a fresh copy of the file.
    # BYPASS = The proxy_cache_bypass directive will inform Nginx to honor the Cache-Control header in HTTP requests.
    # note: adds a HTTP response header "X-Cache" returning HIT/MISS/BYPASS/EXPIRED for cache use status
    add_header X-Cache $upstream_cache_status;

    location / {
        # This is cool because no php is touched for static content.
        # include the "?$args" part so non-default permalinks doesn't break when using query string
        try_files $uri $uri/ /index.php?$query_string;

        #### Simple DDoS Defense / LIMITS
        #### Control Simultaneous Connections
        limit_conn conn_limit_per_ip 1;
        limit_req zone=req_limit_per_ip burst=10 nodelay;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    location ~ (^|/)\. { log_not_found off; deny all; }
    location ~ ~$ { log_not_found off; deny all; }

    # Deny access to dotfiles
    # Deny all attempts to access hidden files
    location ~ /\. { log_not_found off; deny all; }

    # Media: images, icons, video, audio | CSS/Javascript/HTML
    location ~* \.(?:jpg|jpeg|gif|png|ico|gz|svg|svgz|mp4|css|js)$ {
        expires max;
        access_log off;
    }

    # Cache everything by default
    set $no_cache 0;

    # Only cache GET requests
    if ($request_method != GET) {
        set $no_cache 1;
    }

    # Don't cache if the URL contains a query string
    if ($query_string != "") {
        set $no_cache 1;
    }

    # Don't cache the following URLs
    if ($request_uri ~* "/(login.php|backend|admin)") {
        set $no_cache 1;
    }

    # Don't cache if there is a cookie called PHPSESSID
    if ($http_cookie ~* "PHPSESSID") {
        set $no_cache 1;
    }

    # If custom header exists
    if ($http_x_custom_header) {
        set $no_cache 1;
    }

    error_page 404 /index.php;

    location ~ \.php$ {
        fastcgi_cache APP_CACHE;
        fastcgi_cache_valid 200 301 302 10m;
        fastcgi_cache_use_stale error timeout invalid_header updating http_500;
        fastcgi_cache_methods GET HEAD; # Only GET and HEAD methods apply

        fastcgi_cache_bypass $no_cache; # Don't pull from cache based on $no_cache
        fastcgi_no_cache $no_cache; #  Don't save to cache based on $no_cache

        fastcgi_hide_header X-Powered-By;
        fastcgi_pass_header Set-Cookie;
        fastcgi_pass_header Cookie;
        fastcgi_ignore_headers Cache-Control Expires Set-Cookie;

        fastcgi_keep_conn on;

        # Regular PHP-FPM stuff:
        fastcgi_pass php-fpm:9000;
        fastcgi_index index.php;
        # NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
        fastcgi_split_path_info ^(.+\.php)(/.+)$;

        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        include fastcgi.conf;
    }
}
