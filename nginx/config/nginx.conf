# Significa que o Nginx irá executar como usuário www-data.
#
# Defines user and group credentials used by worker processes.
# If group is omitted, a group whose name equals that of user is used.
#
# (Default: user nobody nobody;)
# (Context: main)
user www-data;

# Determines whether nginx should become a daemon.
# Mainly used during development.
# daemon off;

# Defines the number of worker processes.
#
# The maximum number of connections for Nginx is calculated by: (max_clients = worker_processes * worker_connections).
#
# The optimal value depends on many factors including (but not limited to) the number of CPU cores, the number of hard disk drives that store data, and load pattern.
# When one is in doubt, setting it to the number of available CPU cores would be a good start (the value “auto” will try to autodetect it).
# One worker process per CPU core.
#
# You must set worker processes based on your CPU cores, nginx does not benefit from setting more than that.
#
# (Default: worker_processes 1;)
# (Context: main)
worker_processes auto;

# Defines a file that will store the process ID of the main process.
#
# (Default: pid logs/nginx.pid;)
# (Context: main)
pid /var/run/nginx.pid;

# Also set
# /etc/security/limits.conf
#   www-data soft nofile 50000
#   www-data hard nofile 100000
# /etc/default/nginx
#     ULIMIT="-n 100000"
#
# Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes.
# Used to increase the limit without restarting the main process.
#
# Maximum open file descriptors per process;
# should be > worker_connections.
#
# Number of file descriptors used for nginx the limit for the maximum FDs on the server is usually set by the OS.
#
# (Default: —)
# (Context: main)
worker_rlimit_nofile 100000;

# Provides the configuration file context in which the directives that affect connection processing are specified.
events {

    # The formula for maximum number of connections we can handle then becomes:
    #   worker_processes * worker_connections * (K / average $request_time)
    #       Where K is the amount of currently active connections.
    #       Additionally, for the value K, we also have to consider reverse proxying which will open up an additional connection to your backend.

    # Define o número máximo de conexões simultâneas que podem ser abertas por um processo de trabalho.
    #
    # Determines how many clients will be served by each worker process.
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    #
    # Should be equal to `ulimit -n`.
    #
    # worker_connections não pode exceder worker_rlimit_nofile se configurado.
    # the actual number of simultaneous connections cannot exceed the current limit on the maximum number of open files, which can be changed by worker_rlimit_nofile.
    #
    # max clients is also limited by the number of socket connections available on the system (~64k)
    #
    # (Default: worker_connections 512;)
    # (Context: events)
    worker_connections 6000;

    # Let each process accept multiple connections.
    #
    # Accept as many connections as possible, after nginx gets notification about a new connection.
    #
    # If multi_accept is disabled, a worker process will accept one new connection at a time.
    # Otherwise, a worker process will accept all new connections at a time.
    #
    # (Default: multi_accept off;)
    # (Context: events)
    multi_accept on;

    # Preferred connection method for newer linux versions.
    #
    # Essential for linux, optmized to serve many clients with each thread.
    #
    # Specifies the connection processing method to use.
    # There is normally no need to specify it explicitly, because nginx will by default use the most efficient method.
    #
    # (Default: —)
    # (Context: events)
    use epoll;
}

http {

    ## Define the MIME types for files.
    include mime.types;

    ################
    # Basic Settings
    ################

    # Sets the maximum size of the types hash tables.
    # The details of setting up hash tables are provided in a separate [document](http://nginx.org/en/docs/hash.html).
    #
    # (Default: types_hash_max_size 1024;)
    # (Context: http, server, location)
    types_hash_max_size 2048;

    # Hide nginx version information.
    # Enables or disables emitting nginx version on error pages and in the “Server” response header field.
    # Don't send the nginx version number in error pages and Server header.
    #
    # Prevent Nginx from sending in the `Server` response header its exact version number.
    #
    # https://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens
    #
    # (Default: server_tokens on;)
    # (Context: http, server, location)
    server_tokens off;

    # Defines the default MIME type of a response.
    # Mapping of file name extensions to MIME types can be set with the types directive.
    #
    # (Default: default_type text/plain;)
    # (Context: http, server, location)
    default_type application/octet-stream;

    # Defines files that will be used as an index.
    # The file name can contain variables.
    # Files are checked in the specified order.
    # The last element of the list can be a file with an absolute path.
    #
    # (Default: index index.html;)
    # (Context: http, server, location)
    index index.html index.htm index.php;

    # Adds the specified charset to the “Content-Type” response header field.
    # If this charset is different from the charset specified in the source_charset directive, a conversion is performed.
    #
    # (Default: charset off;)
    # (Context: http, server, location, if in location)
    charset utf-8;

    # Update charset_types to match updated mime.types.
    # text/html is always included by charset module.
    # Default: text/html text/xml text/plain text/vnd.wap.wml application/javascript application/rss+xml
    #
    # https://nginx.org/en/docs/http/ngx_http_charset_module.html#charset_types
    charset_types
        text/css
        text/plain
        text/vnd.wap.wml
        text/javascript
        text/markdown
        text/calendar
        text/x-component
        text/vcard
        text/cache-manifest
        text/vtt
        application/json
        application/manifest+json;

    ##################
    # Logging Settings
    ##################

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    # Sets the path, format, and configuration for a buffered log write.
    # Several logs can be specified on the same level.
    # (this is only used when you don't override access_log on a server{} level).
    # Logging to syslog can be configured by specifying the “syslog:” prefix in the first parameter.
    # The special value off cancels all access_log directives on the current level.
    # If the format is not specified then the predefined “combined” format is used.
    # To boost I/O on HDD we can disable access logs
    #
    # (Default: access_log logs/access.log combined;)
    # (Context: http, server, location, if in location, limit_except)
    # access_log /var/log/nginx/access.log main buffer=64K flush=5m;

    # Configures logging.
    # Several logs can be specified on the same level.
    # If on the main configuration level writing a log to a file is not explicitly defined, the default file will be used.
    #
    # The second parameter determines the level of logging, and can be one of the following: debug, info, notice, warn, error, crit, alert, or emerg.
    # Log levels above are listed in the order of increasing severity.
    # Setting a certain log level will cause all messages of the specified and more severe log levels to be logged.
    # (this is only used when you don't override error_log on a server{} level)
    # For example, the default level error will cause error, crit, alert, and emerg messages to be logged.
    # If this parameter is omitted then error is used.
    #
    # (Default: error_log logs/error.log error;)
    # (Context: main, http, mail, stream, server, location)
    error_log /var/log/nginx/error.log warn;

    #############
    # Size Limits
    #############

    # Sets buffer size for reading client request body.
    # In case the request body is larger than the buffer, the whole body or only its part is written to a temporary file.
    # By default, buffer size is equal to two memory pages.
    # This is 8K on x86, other 32-bit platforms, and x86-64.
    # It is usually 16K on other 64-bit platforms.
    #
    # (Default: client_body_buffer_size 8k|16k;)
    # (Context: http, server, location)
    client_body_buffer_size 128k;

    # Sets buffer size for reading client request header.
    # For most requests, a buffer of 1K bytes is enough.
    # However, if a request includes long cookies, or comes from a WAP client, it may not fit into 1K.
    # If a request line or a request header field does not fit into this buffer then larger buffers, configured by the large_client_header_buffers directive, are allocated.
    #
    # (Default: client_header_buffer_size 1k;)
    # (Context: http, server)
    client_header_buffer_size 16k;

    # Sets the maximum allowed size of the client request body, specified in the “Content-Length” request header field.
    # If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client.
    # Please be aware that browsers cannot correctly display this error.
    # Setting size to 0 disables checking of client request body size.
    #
    # (Default: client_max_body_size 1m;)
    # (Context: http, server, location)
    client_max_body_size 2m;

    # Sets the maximum number and size of buffers used for reading large client request header.
    # A request line cannot exceed the size of one buffer, or the 414 (Request-URI Too Large) error is returned to the client.
    # A request header field cannot exceed the size of one buffer as well, or the 400 (Bad Request) error is returned to the client.
    # Buffers are allocated only on demand. By default, the buffer size is equal to 8K bytes.
    # If after the end of request processing a connection is transitioned into the keep-alive state, these buffers are released.
    #
    # (Default: large_client_header_buffers 4 8k;)
    # (Context: http, server)
    large_client_header_buffers 4 256k;

    # Allow the server to close the connection after a client stops responding.
    # Frees up socket-associated memory.
    #
    # Enables or disables resetting timed out connections.
    #
    # It should be noted that timed out keep-alive connections are closed normally.
    #
    # Allow the server to close connection on non responding client, this will free up memory.
    # Deflect DDoS.
    #
    # (Default: reset_timedout_connection off;)
    # (Context: http, server, location)
    reset_timedout_connection on;

    #### Simple DDoS Defense / LIMITS
    # @see https://www.nginx.com/blog/mitigating-ddos-attacks-with-nginx-and-nginx-plus/

    # Limit the number of connections per single IP.
    #
    # Sets parameters for a shared memory zone that will keep states for various keys.
    # In particular, the state includes the current number of connections.
    # The key can contain text, variables, and their combination.
    # Requests with an empty key value are not accounted.
    #
    # (Default: —)
    # (Context: http)
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    limit_conn_zone $server_name zone=conn_limit_per_server:10m;

    # Limit the number of requests for a given session.
    #
    # Sets parameters for a shared memory zone that will keep states for various keys.
    # In particular, the state stores the current number of excessive requests.
    # The key can contain text, variables, and their combination.
    # Requests with an empty key value are not accounted.
    #
    # (Default: —)
    # (Context: http)
    limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=10r/s;

    # Sets the status code to return in response to rejected requests.
    #
    # (Default: limit_conn_status 503;)
    # (Context: http, server, location)
    limit_conn_status 444;

    # Sets the status code to return in response to rejected requests.
    #
    # (Default: limit_req_status 503;)
    # (Context: http, server, location)
    limit_req_status 429;

    # Sets the shared memory zone and the maximum allowed number of connections for a given key value.
    # When this limit is exceeded, the server will return the error in reply to a request.
    #
    # Allow only one connection per an IP address at a time.
    #
    # In HTTP/2 and SPDY, each concurrent request is considered a separate connection.
    #
    # (Default: —)
    # (Context: http, server, location)
    limit_conn conn_limit_per_ip 5;

    # Sets the shared memory zone and the maximum burst size of requests.
    # If the requests rate exceeds the rate configured for a zone, their processing is delayed such that requests are processed at a defined rate.
    # Excessive requests are delayed until their number exceeds the maximum burst size in which case the request is terminated with an error.
    # By default, the maximum burst size is equal to zero.
    #
    # (Default: —)
    # (Context: http, server, location)
    limit_req zone=req_limit_per_ip burst=30 delay=20;

    ##########
    # Timeouts
    ##########

    # Timeouts, do not keep connections open longer then necessary to reduce resource usage and deny Slowloris type attacks.

    # Defines a timeout for reading client request body.
    # The timeout is set only for a period between two successive read operations, not for the transmission of the whole request body.
    # If a client does not transmit anything within this time, the 408 (Request Time-out) error is returned to the client.
    #
    # (Default: client_body_timeout 60s;)
    # (Context: http, server, location)
    client_body_timeout 30s;

    # Defines a timeout for reading client request header.
    # If a client does not transmit the entire header within this time, the 408 (Request Time-out) error is returned to the client.
    #
    # (Default: client_header_timeout 60s;)
    # (Context: http, server)
    client_header_timeout 30s;

    # Define um limite de tempo durante o qual uma conexão de cliente keep-alive vai ficar aberta no servidor.
    #     O valor zero desativa conexões keep-alive com cliente.
    #
    # The author of nginx claims that 10,000 idle connections will use only 2.5 MB of memory, and from what I’ve seen this seems to be correct.
    #
    # Sets a timeout during which a keep-alive client connection will stay open on the server side.
    # The zero value disables keep-alive client connections.
    #
    # The keepalive_timeout assigns the timeout for keep-alive connections with the client.
    # Simply put, Nginx will close connections with the client after this period of time.
    #
    # Keepalive connections allow to reuse the same TCP connection for multiple HTTP requests.
    #
    # (Default: keepalive_timeout 75s;)
    # (Context: http, server, location)
    keepalive_timeout 60s;

    # Sets the maximum number of requests that can be served through one keep-alive connection.
    # After the maximum number of requests are made, the connection is closed.
    # Number of requests client can make over keep-alive.
    #
    # (Default: keepalive_requests 100;)
    # (Context: http, server, location)
    keepalive_requests 100;

    # Sets a timeout for transmitting a response to the client.
    # The timeout is set only between two successive write operations, not for the transmission of the whole response.
    # If the client does not receive anything within this time, the connection is closed.
    #
    # (Default: send_timeout 60s;)
    # (Context: http, server, location)
    send_timeout 20s;

    #######################
    # Open File Descriptors
    #######################

    # Caches information about open FDs, freqently accessed files.

    # Configures a cache that can store:
    #   open file descriptors, their sizes and modification times;
    #   information on existence of directories;
    #   file lookup errors, such as “file not found”, “no read permission”, and so on.
    #
    # (Default: open_file_cache off;)
    # (Context: http, server, location)
    open_file_cache max=50000 inactive=1m;

    # Sets a time after which open_file_cache elements should be validated.
    #
    # (Default: open_file_cache_valid 60s;)
    # (Context: http, server, location)
    open_file_cache_valid 30s;

    # Sets the minimum number of file accesses during the period configured by the inactive parameter of the open_file_cache directive, required for a file descriptor to remain open in the cache.
    #
    # (Default: open_file_cache_min_uses 1;)
    # (Context: http, server, location)
    open_file_cache_min_uses 5;

    # Enables or disables caching of file lookup errors by open_file_cache.
    #
    # (Default: open_file_cache_errors off;)
    # (Context: http, server, location)
    open_file_cache_errors off;

    # Não bloqueia a saída e entrada do disco informando que os dados não estão na memória.
    #     Em seguida, o nginx inicia uma carga de dados assíncronos através da leitura de um byte.
    #
    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring data to and from the user space.
    # Copies data between one FD and other from within the kernel faster then read() + write().
    #
    # (Default: sendfile off;)
    # Context: http, server, location, if in location)
    sendfile on;

    # When set to a non-zero value, limits the amount of data that can be transferred in a single sendfile() call.
    # Without the limit, one fast connection may seize the worker process entirely.
    #
    # (Default: sendfile_max_chunk 0;)
    # (Context: http, server, location)
    sendfile_max_chunk 1m;

    # Somente é usada quando o sendfile também está ativo.
    #     Pois, esta diretiva é reponsável por enviar o cabeçalho de resposta de pacotes para o sistema operacional.
    #
    # Tell Nginx not to send out partial frames; this increases throughput since TCP frames are filled up before being sent out. (adds TCP_CORK).
    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet, instead of using partial frames.
    # This is useful for prepending headers before calling sendfile, or for throughput optimization.
    # Send headers in one peace, its better then sending them one by one.
    #
    # (Default: tcp_nopush off;)
    # (Context: http, server, location)
    tcp_nopush on;

    # Don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
    #
    # Enables or disables the use of the TCP_NODELAY option.
    # The option is enabled only when a connection is transitioned into the keep-alive state.
    # Don't buffer data sent, good for small data bursts in real time.
    #
    # (Default: tcp_nodelay on;)
    # (Context: http, server, location)
    tcp_nodelay on;

    #################
    ## Adjust FASTCGI
    #################

    fastcgi_buffers 256 16k;
    fastcgi_buffer_size 128k;
    fastcgi_connect_timeout 30s;
    fastcgi_send_timeout 120s;
    fastcgi_read_timeout 120s;
    fastcgi_busy_buffers_size 256k;
    fastcgi_temp_file_write_size 256k;
    fastcgi_hide_header X-Powered-By;

    ###############
    ## Adjust PROXY
    ###############

    proxy_set_header    Host              $host;
    proxy_set_header    X-Real-IP         $remote_addr;
    proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-SSL on;
    proxy_set_header    X-Forwarded-Proto $scheme;

    # proxy_redirect off;

    ################
    ## Gzip Settings
    ################

    # Enables or disables gzipping of responses.
    #
    # (Default: gzip off;)
    # (Context: http, server, location, if in location)
    gzip on;

    # Disables gzipping of responses for requests with “User-Agent” header fields matching any of the specified regular expressions.
    #
    # (Default: —)
    # (Context: http, server, location)
    gzip_disable "msie6";

    # Enables or disables inserting the “Vary: Accept-Encoding” response header field if the directives gzip, gzip_static, or gunzip are active.
    #
    # (Default: gzip_vary off;)
    # (Context: http, server, location)
    gzip_vary on;

    # Enables or disables gzipping of responses for proxied requests depending on the request and response.
    # The fact that the request is proxied is determined by the presence of the “Via” request header field.
    #
    # (Default: gzip_proxied off;)
    # (Context: http, server, location)
    gzip_proxied any;

    # Sets a gzip compression level of a response. Acceptable values are in the range from 1 to 9.
    #
    # (Default: gzip_comp_level 1;)
    # (Context: http, server, location)
    gzip_comp_level 6;

    # Sets the minimum length of a response that will be gzipped.
    # The length is determined only from the “Content-Length” response header field.
    #
    # (Default: gzip_min_length 20;)
    # (Context: http, server, location)
    gzip_min_length 20;

    # Compress all output labeled with one of the following MIME-types.
    #
    # Enables gzipping of responses for the specified MIME types in addition to “text/html”.
    # The special value “*” matches any MIME type.
    #
    # (Responses with the “text/html” type are always compressed).
    #
    # (Default: gzip_vary off;)
    # (Context: http, server, location)
    gzip_types
        application/atom+xml
        application/javascript
        application/x-javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/xml
        text/plain
        text/javascript
        text/x-component;

    #############################
    ## Include Additional Configs
    #############################

    map $http_x_forwarded_proto $is_https {
        default off;
        https on;
    }

    # Add Content-Security-Policy for HTML documents
    map $sent_http_content_type $content_security_policy {
        default "";
        "text/html; charset=utf-8" "default-src 'self'; script-src 'self' https://cdnjs.cloudflare.com https://ssl.google-analytics.com https://connect.facebook.net; img-src 'self' https://ssl.google-analytics.com https://s-static.ak.facebook.com; style-src 'self' https://cdnjs.cloudflare.com https://fonts.googleapis.com https://fonts.gstatic.com; font-src 'self' https://themes.googleusercontent.com https://fonts.gstatic.com; child-src https://www.instagram.com https://twitter.com https://www.google.com https://disqus.com https://www.youtube.com https://syndication.twitter.com https://platform.twitter.com https://www.facebook.com https://s-static.ak.facebook.com; form-action 'self'; frame-ancestors 'self'; block-all-mixed-content; upgrade-insecure-requests 1; object-src 'none'";
    }

    # Add Referrer-Policy for HTML documents
    map $sent_http_content_type $referrer_policy {
        default "";
        "text/html" "strict-origin-when-cross-origin";
        "text/html; charset=utf-8" "strict-origin-when-cross-origin";
    }

    # Add Feature-policy for HTML documents
    map $sent_http_content_type $feature_policy {
        default "";
        "text/html; charset=utf-8" "accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; payment 'none'; usb 'none'; ambient-light-sensor 'none'; autoplay 'none'; encrypted-media 'none'; fullscreen 'self'; midi 'none'; sync-xhr 'none'; speaker 'none'; vr 'none';";
    }

    # Security HTTP Headers
    include snippets/security_http_headers.conf;

    # Block spammers and other unwanted visitors | BLOCK TOR IPS
    include snippets/deny_ips.conf;

    # Restoring the original visitor IP for your web application
    include snippets/real_ip.conf;

    # Cache expiration
    include snippets/cache_expiration.conf;

    # Certification location
    include /etc/nginx/snippets/ssl_common_certificates.conf;

    # Strong TLS + TLS Best Practices
    include /etc/nginx/snippets/ssl_best_practices.conf;

    ##########################
    ## Include Vhosts(SERVERS)
    ##########################

    # Block all HTTP:80
    server {
        listen 80 default_server;
        listen [::]:80 default_server ipv6only=on;

        listen 443 ssl http2 default_server;
        listen [::]:443 ssl http2 default_server;

        ssl_certificate /etc/nginx/certs/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/privkey.pem;

        server_name _;

        deny all;
    }

    # Redirect all HTTP traffic to HTTPS
    # Nginx virtual hosts (HTTPS-only)
    # @see https://stackoverflow.com/questions/7947030/nginx-no-www-to-www-and-www-to-no-www
    server {
        listen 80;
        listen [::]:80;

        server_name
                    # dedicated server for some sites only
                    ~^(?<domain>(?:example\.com|admin\.example\.com|api\.example\.com|webmail\.example\.com))$
                    # www to non-www w/ regex in a dedicated server for some sites only
                    ~^www\.(?<domain>(?:example\.com))$;

        server_name_in_redirect off;
        port_in_redirect off;
        log_not_found off;

        # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response
        return 301 https://$domain$request_uri;

        # location / {
        #     # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response
        #     return 301 https://$server_name$request_uri;
        # }
    }

    include servers/*.conf;
}
