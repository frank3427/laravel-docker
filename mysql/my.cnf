# The MySQL database server configuration file.
#
# You can copy this to one of:
# - "/etc/mysql/my.cnf" to set global options,
# - "~/.my.cnf" to set user-specific options.
#
# One can use all long options that the program supports.
# Run program with --help to get a list of available options and with
# --print-defaults to see which it would actually understand and use.
#
# For explanations see
# http://dev.mysql.com/doc/mysql/en/server-system-variables.html

[mysqld]

# Whether client connections to the server are required to use some form of secure transport.
# When this variable is enabled, the server permits only TCP/IP connections that use SSL, or connections that use a socket file (on Unix) or shared memory (on Windows).
# The server rejects nonsecure connection attempts, which fail with an ER_SECURE_TRANSPORT_REQUIRED error.
# (Default OFF)
require_secure_transport = ON

######
## SSL
######
tls_version=TLSv1.1,TLSv1.2
ssl-cipher=DHE-RSA-AES256-SHA
ssl-ca=/etc/mysql-ssl/ca.pem              # default: /var/lib/mysql/ca.pem
ssl-cert=/etc/mysql-ssl/server-cert.pem   # default: /var/lib/mysql/server-cert.pem
ssl-key=/etc/mysql-ssl/server-key.pem     # default: /var/lib/mysql/server-key.pem

##########
## GENERAL
##########

# The path to the MySQL installation directory.
basedir = /usr

# The port number to use for the connection, for connections made using TCP/IP.
# The default port number is 3306.
port = 3306

# The user name of the MySQL account you want to use.
# The default user name is ODBC on Windows or your Unix login name on Unix.
# user = mysql

# On Unix, this option specifies the Unix socket file to use when listening for local connections.
# The default value is /tmp/mysql.sock. If this option is given, the server creates the file in the data directory unless an absolute path name is given to specify a different directory.
# On Windows, the option specifies the pipe name to use when listening for local connections that use a named pipe.
# The default value is MySQL (not case sensitive).
# (Default /tmp/mysql.sock)
socket = /var/run/mysqld/mysqld.sock

# The path name of the process ID file. This variable can be set with the --pid-file option.
# The server creates the file in the data directory unless an absolute path name is given to specify a different directory.
# If you specify the --pid-file option, you must specify a value. If you do not specify the --pid-file option, MySQL uses a default value of host_name.pid, where host_name is the name of the host machine.
pid-file = /var/run/mysqld/mysqld.pid

# The default storage engine. This variable sets the storage engine for permanent tables only.
# To set the storage engine for TEMPORARY tables, set the default_tmp_storage_engine system variable.
#
# To see which storage engines are available and enabled, use the SHOW ENGINES statement or query the INFORMATION_SCHEMA ENGINES table.
#
# default_storage_engine should be used in preference to storage_engine, which is deprecated and was removed in MySQL 5.7.5.
#
# If you disable the default storage engine at server startup, you must set the default engine for both permanent and TEMPORARY tables to a different engine or the server will not start.
# (Default InnoDB)
default_storage_engine = InnoDB

# The MySQL server listens on a single network socket for TCP/IP connections.
# This socket is bound to a single address, but it is possible for an address to map onto multiple network interfaces.
# Instead of skip-networking the default is now to listen only on localhost which is more compatible and is not less secure.
# (Default *)
bind-address = 0.0.0.0

# Disabling symbolic-links is recommended to prevent assorted security risks.
symbolic-links = 0

# The autocommit mode.
# If set to 1, all changes to a table take effect immediately.
# If set to 0, you must use COMMIT to accept a transaction or ROLLBACK to cancel it.
# If autocommit is 0 and you change it to 1, MySQL performs an automatic COMMIT of any open transaction.
# Another way to begin a transaction is to use a START TRANSACTION or BEGIN statement.
# (Default ON)
autocommit = 1

# The current server SQL mode.
sql_mode = STRICT_TRANS_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ONLY_FULL_GROUP_BY

# The default transaction isolation level. Defaults to REPEATABLE-READ.
transaction_isolation = READ-COMMITTED

# Changes the number of file descriptors available to mysqld.
# You should try increasing the value of this option if mysqld gives you the error Too many open files.
# mysqld uses the option value to reserve descriptors with setrlimit().
# Internally, the maximum value for this option is the maximum unsigned integer value, but the actual maximum is platform dependent.
# If the requested number of file descriptors cannot be allocated, mysqld writes a warning to the error log.
#
# mysqld may attempt to allocate more than the requested number of descriptors (if they are available), using the values of max_connections and table_open_cache to estimate whether more descriptors will be needed.
#
# On Unix, the value cannot be set greater than ulimit -n.
# (Default 5000)
open_files_limit = 65535

########################
## Charset and Collation
########################

# The server's default character set.
# (Default latin1)
character_set_server = utf8mb4

# The server's default collation.
# (Default latin1_swedish_ci)
collation_server = utf8mb4_unicode_ci

# A string to be executed by the server for each client that connects.
# The string consists of one or more SQL statements, separated by semicolon characters.
init_connect = 'SET NAMES utf8mb4'

###############
## Data Storage
###############

# The path to the MySQL server data directory.
# Relative paths are resolved with respect to the current directory.
# If the server will be started automatically (that is, in contexts for which you cannot assume what the current directory will be), it is best to specify the datadir value as an absolute path.
datadir = /var/lib/mysql

# The path of the directory to use for creating temporary files.
# It might be useful if your default /tmp directory resides on a partition that is too small to hold temporary tables.
# This option accepts several paths that are used in round-robin fashion.
# Paths should be separated by colon characters (:) on Unix and semicolon characters (;) on Windows.
# If the MySQL server is acting as a replication slave, you should not set --tmpdir to point to a directory on a memory-based file system or to a directory that is cleared when the server host restarts.
tmpdir = /tmp

#########
## MyISAM
#########

# Index blocks for MyISAM tables are buffered and are shared by all threads.
# key_buffer_size is the size of the buffer used for index blocks.
# The key buffer is also known as the key cache.
key_buffer_size = 128M

# Set the MyISAM storage engine recovery mode.
# The option value is any combination of the values of OFF, DEFAULT, BACKUP, FORCE, or QUICK.
# If you specify multiple values, separate them by commas.
myisam_recover_options = FORCE,BACKUP

# This is OFF if mysqld uses external locking (system locking), ON if external locking is disabled.
# This affects only MyISAM table access.
#
# This variable is set by the --external-locking or --skip-external-locking option.
# External locking is disabled by default.
skip_external_locking = 1

###########
## Logging
###########

# Whether the general query log is enabled.
# The value can be 0 (or OFF) to disable the log or 1 (or ON) to enable the log.
# The default value depends on whether the --general_log option is given.
# The destination for log output is controlled by the log_output system variable;
# if that value is NONE, no log entries are written even if the log is enabled.
general_log = 1

# The name of the general query log file.
# The default value is host_name.log, but the initial value can be changed with the --general_log_file option.
general_log_file = /var/log/mysql/mysql-general.log

# The error log output destination. If the destination is the console, the value is stderr.
# Otherwise, the destination is a file and the log_error value is the file name.
log_error = /var/log/mysql/mysql-error.log

#################
## Slow Query Log
#################

# Whether the slow query log is enabled.
# The value can be 0 (or OFF) to disable the log or 1 (or ON) to enable the log.
# The default value depends on whether the --slow_query_log option is given.
# The destination for log output is controlled by the log_output system variable; if that value is NONE, no log entries are written even if the log is enabled.
#
# "Slow" is determined by the value of the long_query_time variable.
# (Default OFF)
slow_query_log = 1

# The name of the slow query log file.
# The default value is host_name-slow.log, but the initial value can be changed with the --slow_query_log_file option.
# (Default host_name-slow.log)
slow_query_log_file = /var/log/mysql/mysql-slow.log

# Include slow administrative statements in the statements written to the slow query log.
# Administrative statements include ALTER TABLE, ANALYZE TABLE, CHECK TABLE, CREATE INDEX, DROP INDEX, OPTIMIZE TABLE, and REPAIR TABLE.
# (Default OFF)
log_slow_admin_statements = 1

# When the slow query log is enabled, this variable enables logging for queries that have taken more than long_query_time seconds to execute on the slave.
# This variable was added in MySQL 5.7.1. Setting this variable has no immediate effect.
# The state of the variable applies on all subsequent START SLAVE statements.
#
# Note that all statements logged in row format in the master will not be logged in the slave's slow log, even if log_slow_slave_statements is enabled.
# (Default OFF)
log_slow_slave_statements = 1

# If a query takes longer than this many seconds, the server increments the Slow_queries status variable.
# If the slow query log is enabled, the query is logged to the slow query log file.
# This value is measured in real time, not CPU time, so a query that is under the threshold on a lightly loaded system might be above the threshold on a heavily loaded one.
# (Default 10)
long_query_time = 10

# Whether queries that do not use indexes are logged to the slow query log.
# (Default OFF)
log_queries_not_using_indexes = 1

# If log_queries_not_using_indexes is enabled, the log_throttle_queries_not_using_indexes variable limits the number of such queries per minute that can be written to the slow query log.
# A value of 0 (the default) means "no limit"
log_throttle_queries_not_using_indexes = 10

# Queries that examine fewer than this number of rows are not logged to the slow query log.
# (Default 0)
min_examined_row_limit = 100

###############################
## Binary Logging / Replication
###############################

# Controls the number of binary log commit groups to collect before synchronizing the binary log to disk.
# When sync_binlog=0, the binary log is never synchronized to disk, and when sync_binlog is set to a value greater than 0 this number of binary log commit groups is periodically synchronized to disk.
# When sync_binlog=1, all transactions are synchronized to the binary log before they are committed.
# Therefore, even in the event of an unexpected restart, any transactions that are missing from the binary log are only in prepared state.
# This causes the server's automatic recovery routine to roll back those transactions.
# This guarantees that no transaction is lost from the binary log, and is the safest option.
# However this can have a negative impact on performance because of an increased number of disk writes.
# Using a higher value improves performance, but with the increased risk of data loss.
#
# When sync_binlog=0 or sync_binlog is greater than 1, transactions are committed without having been synchronized to disk.
# Therefore, in the event of a power failure or operating system crash, it is possible that the server has committed some transactions that have not been synchronized to the binary log.
# Therefore it is impossible for the recovery routine to recover these transactions and they will be lost from the binary log.
#
# Prior to MySQL 5.7.7, the default value of sync_binlog was 0, which configures no synchronizing to disk—in this case, the server relies on the operating system to flush the binary log's contents from time to time as for any other file.
# MySQL 5.7.7 and later use a default value of 1, which is the safest choice, but as noted above can impact performance.
sync_binlog = 1

# This option is common to both master and slave replication servers, and is used in replication to enable master and slave servers to identify themselves uniquely.
server_id = 1

# The base name for the relay log. For the default replication channel, the default base name for relay logs is host_name-relay-bin.
# For non-default replication channels, the default base name for relay logs is host_name-relay-bin-channel, where channel is the name of the replication channel recorded in this relay log.
# The server writes the file in the data directory unless the base name is given with a leading absolute path name to specify a different directory.
# The server creates relay log files in sequence by adding a numeric suffix to the base name.
relay_log = /var/log/mysql/mysql-relay-bin

# The name to use for the relay log index file.
# The default name is host_name-relay-bin.index in the data directory, where host_name is the name of the server.
# For the default replication channel, the default name is host_name-relay-bin.index.
# For non-default replication channels, the default name is host_name-relay-bin-channel.index, where channel is the name of the replication channel recorded in this relay log index.
relay_log_index = /var/log/mysql/mysql-relay-bin.index

# The number of days for automatic binary log file removal.
# The default is 0, which means "no automatic removal." Possible removals happen at startup and when the binary log is flushed.
# To remove binary log files manually, use the PURGE BINARY LOGS statement.
expire_logs_days = 10

# If a write to the binary log causes the current log file size to exceed the value of this variable, the server rotates the binary logs (closes the current file and opens the next one).
# The minimum value is 4096 bytes. The maximum and default value is 1GB.
#
# A transaction is written in one chunk to the binary log, so it is never split between several binary logs.
# Therefore, if you have big transactions, you might see binary log files larger than max_binlog_size.
#
# If max_relay_log_size is 0, the value of max_binlog_size applies to relay logs as well.
max_binlog_size = 1024M

# Whether updates received by a slave server from a master server should be logged to the slave's own binary log.
# Binary logging must be enabled on the slave for this variable to have any effect.
# log-slave-updates = 1

##################
## Caches / Limits
##################

# The maximum size of internal in-memory temporary tables.
# This variable does not apply to user-created MEMORY tables.
#
# The actual limit is determined from whichever of the values of tmp_table_size and max_heap_table_size is smaller.
# If an in-memory temporary table exceeds the limit, MySQL automatically converts it to an on-disk temporary table.
# As of MySQL 5.7.5, the internal_tmp_disk_storage_engine option defines the storage engine used for on-disk temporary tables.
# Prior to MySQL 5.7.5, the MyISAM storage engine is used.
#
# Increase the value of tmp_table_size (and max_heap_table_size if necessary) if you do many advanced GROUP BY queries and you have lots of memory.
#
# You can compare the number of internal on-disk temporary tables created to the total number of internal temporary tables created by comparing the values of the Created_tmp_disk_tables and Created_tmp_tables variables.
tmp_table_size = 128M

# This variable sets the maximum size to which user-created MEMORY tables are permitted to grow.
# The value of the variable is used to calculate MEMORY table MAX_ROWS values.
# Setting this variable has no effect on any existing MEMORY table, unless the table is re-created with a statement such as CREATE TABLE or altered with ALTER TABLE or TRUNCATE TABLE.
# A server restart also sets the maximum size of existing MEMORY tables to the global max_heap_table_size value.
max_heap_table_size = 128M

# How many threads the server should cache for reuse.
# When a client disconnects, the client's threads are put in the cache if there are fewer than thread_cache_size threads there.
# Requests for threads are satisfied by reusing threads taken from the cache if possible, and only when the cache is empty is a new thread created.
# This variable can be increased to improve performance if you have a lot of new connections.
# Normally, this does not provide a notable performance improvement if you have a good thread implementation.
# However, if your server sees hundreds of connections per second you should normally set thread_cache_size high enough so that most new connections use cached threads.
# (Default -1 (autosized))
thread_cache_size = 128

# Each thread that does a sequential scan for a MyISAM table allocates a buffer of this size (in bytes) for each table it scans.
# If you do many sequential scans, you might want to increase this value, which defaults to 131072.
# The value of this variable should be a multiple of 4KB.
# If it is set to a value that is not a multiple of 4KB, its value will be rounded down to the nearest multiple of 4KB.
read_buffer_size = 2M

# This variable is used for reads from MyISAM tables, and, for any storage engine, for Multi-Range Read optimization.
#
# When reading rows from a MyISAM table in sorted order following a key-sorting operation, the rows are read through this buffer to avoid disk seeks.
# Setting the variable to a large value can improve ORDER BY performance by a lot.
# However, this is a buffer allocated for each client, so you should not set the global variable to a large value.
# Instead, change the session variable only from within those clients that need to run large queries.
# (Default 262144)
read_rnd_buffer_size = 1M

# Each session that must perform a sort allocates a buffer of this size.
# sort_buffer_size is not specific to any storage engine and applies in a general manner for optimization.
# At minimum the sort_buffer_size value must be large enough to accommodate fifteen tuples in the sort buffer.
# Also, increasing the value of max_sort_length may require increasing the value of sort_buffer_size.
# (Default 262144)
sort_buffer_size = 4M

# The minimum size of the buffer that is used for plain index scans, range index scans, and joins that do not use indexes and thus perform full table scans.
# Normally, the best way to get fast joins is to add indexes.
# Increase the value of join_buffer_size to get a faster full join when adding indexes is not possible.
# One join buffer is allocated for each full join between two tables. For a complex join between several tables for which indexes are not used, multiple join buffers might be necessary.
# (Default 262144) - The default is 256KB.
join_buffer_size = 10M

###################################
## Table Cache Performance Settings
###################################

# The number of open tables for all threads.
# Increasing this value increases the number of file descriptors that mysqld requires.
# You can check whether you need to increase the table cache by checking the Opened_tables status variable.
# Default Value (>= 8.0.4) 4000
# Default Value (<= 8.0.3) 2000
table_open_cache = 5000

# The number of table definitions (from .frm files) that can be stored in the definition cache.
# If you use a large number of tables, you can create a large table definition cache to speed up opening of tables.
# The table definition cache takes less space and does not use file descriptors, unlike the normal table cache.
# The minimum value is 400.
table_definition_cache = 4096

# The number of open tables cache instances.
# To improve scalability by reducing contention among sessions, the open tables cache can be partitioned into several smaller cache instances of size table_open_cache / table_open_cache_instances.
# A session needs to lock only one instance to access it for DML statements.
# This segments cache access among instances, permitting higher performance for operations that use the cache when there are many sessions accessing tables.
# (DDL statements still require a lock on the entire cache, but such statements are much less frequent than DML statements.)
#
# A value of 8 or 16 is recommended on systems that routinely use 16 or more cores.
table_open_cache_instances = 16

##################
## InnoDB Settings
##################

# Defines the method used to flush data to InnoDB data files and log files, which can affect I/O throughput.
innodb_flush_method = O_DIRECT

# When innodb_file_per_table is enabled (the default), InnoDB stores the data and indexes for each newly created table in a separate .ibd file instead of the system tablespace.
# The storage for these tables is reclaimed when the tables are dropped or truncated.
# This setting enables InnoDBfeatures such as table compression.
innodb_file_per_table = 1

# Controls the balance between strict ACID compliance for commit operations and higher performance that is possible when commit-related I/O operations are rearranged and done in batches.
# You can achieve better performance by changing the default value but then you can lose transactions in a crash.
#
# The default setting of 1 is required for full ACID compliance. Logs are written and flushed to disk at each transaction commit.
# With a setting of 0, logs are written and flushed to disk once per second. Transactions for which logs have not been flushed can be lost in a crash.
# With a setting of 2, logs are written after each transaction commit and flushed to disk once per second. Transactions for which logs have not been flushed can be lost in a crash.
innodb_flush_log_at_trx_commit = 2

# The size in bytes of the buffer pool, the memory area where InnoDB caches table and index data.
# A larger buffer pool requires less disk I/O to access the same table data more than once.
# On a dedicated database server, you might set the buffer pool size to 80% of the machine's physical memory size.
# Be aware of the following potential issues when configuring buffer pool size, and be prepared to scale back the size of the buffer pool if necessary.
# The default value is 134217728 bytes (128MB).
innodb_buffer_pool_size = 1G

# The size in bytes of each log file in a log group. The combined size of log files (innodb_log_file_size * innodb_log_files_in_group) cannot exceed a maximum value that is slightly less than 512GB.
# A pair of 255 GB log files, for example, approaches the limit but does not exceed it.
# The default value is 48MB.
innodb_log_file_size = 512M

# The size in bytes of the buffer that InnoDB uses to write to the log files on disk.
# A large log buffer enables large transactions to run without the need to write the log to disk before the transactions commit.
# Thus, if you have transactions that update, insert, or delete many rows, making the log buffer larger saves disk I/O.
# The default is 16MB.
innodb_log_buffer_size = 8M

# When enabled (the default), InnoDB stores all data twice, first to the doublewrite buffer, then to the actual data files.
# This variable can be turned off with --skip-innodb_doublewrite for benchmarks or cases when top performance is needed rather than concern for data integrity or possible failures.
innodb_doublewrite = 1

# Write and flush the logs every N seconds.
# innodb_flush_log_at_timeout allows the timeout period between flushes to be increased in order to reduce flushing and avoid impacting performance of binary log group commit.
# The default setting for innodb_flush_log_at_timeout is once per second.
innodb_flush_log_at_timeout = 4

# InnoDB tries to keep the number of operating system threads concurrently inside InnoDB less than or equal to the limit given by this variable (InnoDB uses operating system threads to process user transactions).
# Once the number of threads reaches this limit, additional threads are placed into a wait state within a “First In, First Out” (FIFO) queue for execution.
# Threads waiting for locks are not counted in the number of concurrently executing threads.
# innodb_thread_concurrency = 0

# Whether InnoDB performs change buffering, an optimization that delays write operations to secondary indexes so that the I/O operations can be performed sequentially.
# Permitted values are described in the following table. Values may also be specified numerically.
innodb_change_buffering = all

# When this option is enabled, information about all deadlocks in InnoDB user transactions is recorded in the mysqld error log.
# Otherwise, you see information about only the last deadlock, using the SHOW ENGINE INNODB STATUS command.
# An occasional InnoDB deadlock is not necessarily an issue, because InnoDB detects the condition immediately and rolls back one of the transactions automatically.
innodb_print_all_deadlocks = 1

# The common part of the directory path for InnoDB system tablespace data files.
# This setting does not affect the location of file-per-table tablespaces when innodb_file_per_table is enabled.
# The default value is the MySQL data directory. If you specify the value as an empty string, you can specify an absolute file paths for innodb_data_file_path.
innodb_data_home_dir = /var/lib/mysql

# The directory path to the InnoDB redo log files, whose number is specified by innodb_log_files_in_group.
# If you do not specify any InnoDB log variables, the default is to create two files named ib_logfile0 and ib_logfile1 in the MySQL data directory.
# Log file size is given by the innodb_log_file_size system variable.
innodb_log_group_home_dir = /var/lib/mysql

# The number of I/O threads for read operations in InnoDB.
# Its counterpart for write threads is innodb_write_io_threads.
innodb_read_io_threads = 16

# The number of I/O threads for write operations in InnoDB.
# Its counterpart for read threads is innodb_read_io_threads.
# The default value is 4.
innodb_write_io_threads = 12

# A parameter that influences the algorithms and heuristics for the flush operation for the InnoDB buffer pool.
# Primarily of interest to performance experts tuning I/O-intensive workloads.
# It specifies, per buffer pool instance, how far down the buffer pool LRU page list the page cleaner thread scans looking for dirty pages to flush.
# This is a background operation performed once per second.
# innodb_lru_scan_depth = 8192

# The innodb_io_capacity parameter sets an upper limit on the number of I/O operations performed per second by InnoDB background tasks, such as flushing pages from the buffer pool and merging data from the change buffer.
# The innodb_io_capacity limit is a total limit for all buffer pool instances.
# When dirty pages are flushed, the limit is divided equally among buffer pool instances.
# innodb_io_capacity should be set to approximately the number of I/O operations that the system can perform per second.
# Ideally, keep the setting as low as practical, but not so low that background activities fall behind.
# If the value is too high, data is removed from the buffer pool and insert buffer too quickly for caching to provide a significant benefit.
innodb_io_capacity = 2000

# If flushing activity falls behind, InnoDB can flush more aggressively than the limit imposed by innodb_io_capacity.
# innodb_io_capacity_max defines an upper limit the number of I/O operations performed per second by InnoDB background tasks in such situations.
innodb_io_capacity_max = 5000

# Defines the name, size, and attributes of InnoDB system tablespace data files.
# If you do not specify a value for innodb_data_file_path, the default behavior is to create a single auto-extending data file, slightly larger than 12MB, named ibdata1.
innodb_data_file_path = ibdata1:50M;ibdata2:12M:autoextend:max:500M

########################
## Connections / Network
########################

# The maximum permitted number of simultaneous client connections.
# Increasing this value increases the number of file descriptors that mysqld requires.
# If the required number of descriptors are not available, the server reduces the value of max_connections.
# By default, this is 151.
max_connections = 1024

# The maximum number of simultaneous connections permitted to any given MySQL user account.
# A value of 0 (the default) means “no limit.”
#
# This variable has a global value that can be set at server startup or runtime.
# It also has a read-only session value that indicates the effective simultaneous-connection limit that applies to the account associated with the current session.
# The session value is initialized as follows:
#
#   If the user account has a nonzero MAX_USER_CONNECTIONS resource limit, the session max_user_connections value is set to that limit.
#   Otherwise, the session max_user_connections value is set to the global value.
#
# Account resource limits are specified using the CREATE USER or ALTER USER statement.
max_user_connections = 100

# The number of seconds the server waits for activity on a noninteractive connection before closing it.
# On thread startup, the session wait_timeout value is initialized from the global wait_timeout value or from the global interactive_timeout value,
# depending on the type of client (as defined by the CLIENT_INTERACTIVE connect option to mysql_real_connect()).
# (Default 28800)
wait_timeout = 30

# The number of seconds the server waits for activity on an interactive connection before closing it.
# An interactive client is defined as a client that uses the CLIENT_INTERACTIVE option to mysql_real_connect().
# (Default 28800)
interactive_timeout = 180

# This variable specifies the timeout in seconds for attempts to acquire metadata locks.
# The permissible values range from 1 to 31536000 (1 year). The default is 31536000.
#
# This timeout applies to all statements that use metadata locks.
# These include DML and DDL operations on tables, views, stored procedures, and stored functions, as well as LOCK TABLES, FLUSH TABLES WITH READ LOCK, and HANDLER statements.
#
# This timeout does not apply to implicit accesses to system tables in the mysql database, such as grant tables modified by GRANT or REVOKE statements or table logging statements.
# The timeout does apply to system tables accessed directly, such as with SELECT or UPDATE.
#
# The timeout value applies separately for each metadata lock attempt.
# A given statement can require more than one lock, so it is possible for the statement to block for longer than the lock_wait_timeout value before reporting a timeout error.
# When lock timeout occurs, ER_LOCK_WAIT_TIMEOUT is reported.
#
# lock_wait_timeout does not apply to delayed inserts, which always execute with a timeout of 1 year.
# This is done to avoid unnecessary timeouts because a session that issues a delayed insert receives no notification of delayed insert timeouts.
# (Default 31536000)
lock_wait_timeout = 3600

# Skip reverse DNS lookup of clients.
# This variable is set from the value of the --skip-name-resolve option.
# If it is OFF, mysqld resolves host names when checking client connections.
# If it is ON, mysqld uses only IP numbers; in this case, all Host column values in the grant tables must be IP addresses or localhost.
# (Default OFF)
skip-name-resolve

# If more than this many successive connection requests from a host are interrupted without a successful connection, the server blocks that host from further connections.
# You can unblock blocked hosts by flushing the host cache.
# To do so, issue a FLUSH HOSTS statement or execute a mysqladmin flush-hosts command.
# If a connection is established successfully within fewer than max_connect_errors attempts after a previous connection was interrupted, the error count for the host is cleared to zero.
# However, once a host is blocked, flushing the host cache is the only way to unblock it.
# The default is 100.
max_connect_errors = 10

# The maximum size of one packet or any generated/intermediate string, or any parameter sent by the mysql_stmt_send_long_data() C API function.
# The default is 4MB.
#
# The packet message buffer is initialized to net_buffer_length bytes, but can grow up to max_allowed_packet bytes when needed.
# This value by default is small, to catch large (possibly incorrect) packets.
#
# You must increase this value if you are using large BLOB columns or long strings.
# It should be as big as the largest BLOB you want to use.
# The protocol limit for max_allowed_packet is 1GB. The value should be a multiple of 1024;
# nonmultiples are rounded down to the nearest multiple.
# Valor Padrão (> = 8.0.3) 67108864 = 64M
# Valor padrão (<= 8.0.2) 4194304 = 4M
max_allowed_packet = 64M

# The number of seconds that the mysqld server waits for a connect packet before responding with Bad handshake.
# The default value is 10 seconds.
#
# Increasing the connect_timeout value might help if clients frequently encounter errors of the form Lost connection to MySQL server at 'XXX', system error: errno.
connect_timeout = 10

####
# BUGS
####
# @see https://bugs.mysql.com/bug.php?id=69721
# optimizer_switch = mrr=on,mrr_cost_based=off,batched_key_access=on
